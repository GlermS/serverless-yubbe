org: glerm53
app: yubbe-backend
service: v01-yubbe-backendse

frameworkVersion: '2'

custom:
  dynamodb:
    meetingsTable: ${self:service}-meetings-${self:provider.stage}
  serverless-mocha-plugin:
    testTemplate: ../templates/test-template.ejs
    functionTemplate: ../templates/function-template.ejs

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  region: us-east-1

  # you can add statements to the Lambda function's IAM Role here
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 
            - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.dynamodb.meetingsTable}
            - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.dynamodb.meetingsTable}/index/meetingId

  # you can define service wide environment variables here
  environment:
    DDB_MEETINGS_TABLE: ${self:custom.dynamodb.meetingsTable}

functions:
  createMeeting:
    handler: meeting.create_meeting
    events:
      - http:
          method: post
          cors: true
          path: /meeting
          request:
            schemas:
              application/json: ${file(schemas/create_meeting_request.json)}
  readMeeting:
    handler: meeting.read_meeting
    events:
      - http:
          method: get
          path: /meeting
          request:
            parameters:
              querystrings:
                meetingId: true

  updateMeeting:
    handler: meeting.update_meeting
    events:
      - http:
          method: put
          cors: true
          path: /meeting
          request:
            schemas:
              application/json: ${file(schemas/create_meeting_request.json)}
  deleteMeeting:
    handler: meeting.delete_meeting
    events:
      - http:
          method: delete
          cors: true
          path: /meeting
          request:
            parameters:
              querystrings:
                meetingId: true

resources:
  Resources:
    meetingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamodb.meetingsTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1


  Outputs:
    UsersTableArn:
      Description: The ARN for the Meetings' Table
      Value:
        'Fn::GetAtt': [meetingsTable, Arn]
      Export:
        Name: ${self:service}:${self:provider.stage}:MeetingsTableArn # see Fn::ImportValue to use in other services and http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html for documentation on use.
plugins:
  - serverless-pseudo-parameters
  - serverless-mocha
  - serverless-export-env
